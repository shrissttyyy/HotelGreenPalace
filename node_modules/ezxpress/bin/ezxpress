#!/usr/bin/env node

var program = require('commander');
var path = require('path');
var fs = require('fs');
var mkdirp = require('mkdirp');
var pkg = require('../package.json');
var version = pkg.version;

var _exit = process.exit;
process.exit = exit;

// CLI

// around(program, 'optionMissingArgument', function (fn, args) {
//   program.outputHelp();
//   fn.apply(this, args);
//   return { args: [], unknown: [] };
// });

// before(program, 'outputHelp', function () {
//   // track if help was shown for unknown option
//   this._helpShown = true
// });

// before(program, 'unknownOption', function () {
//   // allow unknown options if help was shown, to prevent trailing error
//   this._allowUnknownOption = this._helpShown

//   // show help if not yet shown
//   if (!this._helpShown) {
//     program.outputHelp()
//   }
// })

// ********************* //
//    Program Options    //
// ********************* //

program
  .version(version, '--version')
  .usage('[options] [dir]')
  .option('-c, --css <engine>', 'add stylesheet <engine> support (less|stylus|compass|sass) (default: css)')
  .option('    --git', 'add .gitignore')
  .option('    --gulp', 'add gulpfile.js with browser-sync and nodemon')
  .parse(process.argv);

if (!exit.exited) {
  main();
}

// ********************* //
// Generate application  //
// ********************* //

function generateApplication(projectName, path) {
  var wait = 10;
  console.log();
  console.log('   \033[0;35mGenerating %s\033[0m', `"${projectName}"`);
  console.log();
  console.log('     \x1b[1;36mCreated | Path\x1b[0m');

  // Get HTML files
  var index = getTemplate('html/index.html');
  var exampleTemplate = getTemplate('html/example.template.html')

  // Get JavaScript files
  var app = getTemplate('js/app.js');
  var www = getTemplate('js/www');
  var users = getTemplate('js/routes/users.js');

  // Get Angular files
  var appModule = getTemplate('js/app.module.js');
  var appConfig = getTemplate('js/app.config.js');
  var exampleComponent = getTemplate('js/example.component.js');

  // Get Gulp files
  var gulpFile = getTemplate('js/gulpfile.js');
  var gulpFileSass = getTemplate('js/gulpfile-sass.js');

  // Get CSS files
  var css = getTemplate('css/style.css');
  var sass = getTemplate('css/style.scss');

  // Get Knex/db files
  var knexFile = getTemplate('js/knex/knexfile.js');
  var dbFile = getTemplate('js/knex/db.js');
  var migration = getTemplate('js/knex/create_users.js');
  var seed = getTemplate('js/knex/01-users.js');

  // Get script files
  var setupDb = getTemplate('scripts/setupdb.sh');

  // Create public directories
  mkdir(path, function() {
    writeToFile(path + '/setupdb.sh', setupDb);
    mkdir(path + '/app', function() {
      writeToFile(path + '/app/app.js', app);
      writeToFile(path + '/app/knexfile.js', knexFile);
      writeToFile(path + '/app/db.js', dbFile);
      complete();
    });
    mkdir(path + '/app/migrations/', function() {
      writeToFile(path + '/app/migrations/create_users.js', migration);
      complete();
    })
    mkdir(path + '/app/seeds/', function() {
      writeToFile(path + '/app/seeds/01-users.js', seed);
      complete();
    })
    mkdir(path + '/app/public', function() {
      writeToFile(path + '/app/public/index.html', index);
      complete();
    });
    mkdir(path + '/app/public/js');
    mkdir(path + '/app/public/js/app', function() {
      writeToFile(path + '/app/public/js/app/app.module.js', appModule);
      writeToFile(path + '/app/public/js/app/app.config.js', appConfig);
      complete();
    });
    mkdir(path + '/app/public/js/component', function() {
      writeToFile(path + '/app/public/js/component/example.component.js', exampleComponent);
      writeToFile(path + '/app/public/js/component/example.template.html', exampleTemplate);
      complete();
    });
    mkdir(path + '/app/public/assets');
    mkdir(path + '/app/public/css', function() {
      switch (program.css) {
        case 'sass':
          writeToFile(path + '/app/public/css/style.scss', sass);
          break;
        default:
          writeToFile(path + '/app/public/css/style.css', css);
      }
      complete();
    });
  
    // Create routes directories
    mkdir(path + '/app/routes', function() {
      writeToFile(path + '/app/routes/users.js', users);
      complete();
    });
    
    // Create package.json for project
    var pkg = {
      name: projectName,
      version: '0.0.0',
      scripts: {
        postinstall: "sh ./setupdb.sh",
        start: './app/bin/www'
      },
      dependencies: {
        'angular': '^1.6.0',
        'angular-ui-router': '1.0.0-beta.3',
        'express': '~4.14.1',
        'body-parser': '~1.16.0',
        'debug': '~2.6.0',
        'morgan': '~1.7.0',
        'serve-favicon': '~2.3.2',
        "knex": "^0.12.6",
        "pg": "^6.1.2"
      },
      devDependencies: {
        'browser-sync': '^2.18.5',
        'gulp': '^3.9.1',
        'gulp-nodemon': '^2.2.1',
        'nodemon': '^1.11.0'
      }
    }

    // Create .gitignore file
    if (program.git) {
      writeToFile(path + '/.gitignore', fs.readFileSync(__dirname + '/../templates/js/gitignore'));
    }

    // Create gulpfile.js
    if (program.gulp) {
      pkg.scripts.start = 'gulp';
      switch (program.css) {
        case 'sass':
          pkg.devDependencies['gulp-sass'] = '^3.1.0';
          writeToFile(path + '/gulpfile.js', gulpFileSass);
          break;
        default:
          writeToFile(path + '/gulpfile.js', gulpFile);
          break;
      }
    }

    // write files
    writeToFile(path + '/package.json', JSON.stringify(pkg, null, 2) + '\n');
    mkdir(path + '/app/bin', function(){
      writeToFile(path + '/app/bin/www', www, 0755);
      complete();
    });

    function complete() {
      if (--wait) return;
      console.log();
      console.log('   ✨ ✨ ✨ ✨ ✨ ✨ ✨ ✨ ✨ ✨ ✨ ');
      console.log('   \033[1;36m✨  PROJECT CREATED  ✨\033[0m');
      console.log('   ✨ ✨ ✨ ✨ ✨ ✨ ✨ ✨ ✨ ✨ ✨ ');
      console.log();
      console.log('   \033[4;35mTo Install Dependencies:\033[0m');
      console.log('     %s cd %s && npm install', '$', path);
      console.log();
      console.log('   \033[4;35mTo Run:\033[0m');
      console.log('     %s DEBUG=%s:* npm start', '$', projectName);
      console.log();
    }

    complete();
  });
}

// ************* //
// Main program  //
// ************* //

function main() {
  // Path
  var destPath = program.args.shift() || '.';

  // Project name
  var projectName = createProjectName(path.resolve(destPath)) || 'new-project';

  // Generate application files
  emptyDirectory(destPath, function(empty) {
    if (empty || program.force) {
      generateApplication(projectName, destPath);
    } else {
      console.log('\033[31mERR: current directory is not empty...\033[0m');
      console.log('Aborting...');
      exit(1);
    }
  })
}

// ************* //
// Exit program  //
// ************* //

function exit(code) {
  function done() {
    if(!(draining--)) _exit(code);
  }

  var draining = 0;
  var streams = [process.stdout, process.stderr];

  exit.exited = true;

  streams.forEach(function(stream) {
    // submit write request and wait for complete
    draining += 1;
    stream.write('', done);
  });

  done();
}

// Check if specified directory is empty
// passes boolean value to callback function
function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, contents) {
    if (err && 'ENOENT' != err.code) throw err;
    fn(!contents || !contents.length);
  })
}

// Create project name from directory path
function createProjectName(pathName) {
  return path.basename(pathName)
    .replace(/[^A-Za-z0-9\.()!~*'-]+/g, '-')
    .replace(/^[-_\.]+|-+$/g, '')
    .toLowerCase()
}

// Get template from templates folder. Ex: 'css/style.css'
function getTemplate(filePath) {
  return fs.readFileSync(path.join(__dirname, '..', 'templates', filePath));
}

// Mkdir -p
function mkdir(path, fn) {
  mkdirp(path, 0755, function(err) {
    if (err) throw err;
    console.log('   \033[0;32mdirectory\033[0m : ' + path);
    fn && fn();
  })
}

// Write template to file
function writeToFile(path, str, mode) {
  fs.writeFileSync(path, str, { mode: mode || 0666 });
  console.log('        \x1b[1;32mfile\x1b[0m : ' + path);
}